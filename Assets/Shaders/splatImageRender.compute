// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct splatStruct
{
    float3 position;  // Pozycja w przestrzeni
    float3 scale;     // Skala
    float4 rotation;  // Rotacja
    float shR[9];     // Współczynniki SH (sfera, kanał czerwony)
    float shG[9];     // Współczynniki SH (sfera, kanał zielony)
    float shB[9];     // Współczynniki SH (sfera, kanał niebieski)
    float opacity;
};

    
// Bufory wejściowe (splat, camera, itd.)
StructuredBuffer<float> splatBuffer;   // Bufor dla splatów
StructuredBuffer<float> cameraBuffer : register(t1);        // Bufor dla kamery (pozycja)
Texture2D<float4> groundTruthImage : register(t2);          // Tekstura do porównania (ground truth)
StructuredBuffer<float> sizes : register(t3);                 // Liczba splatow, do pilnowania czy nie wyszlismy poza przedzial
// Bufor wyjściowy: przechowywanie wyniku
RWBuffer<float> lossBuffer : register(u0);
RWTexture2D<float4> Result;
cbuffer CameraData : register(b0) {
    matrix ViewProjectionMatrix;
}

float3x3 ComputeCovariance(float3x3 R, float3 S) {
    float3x3 S_matrix = float3x3(S.x, 0, 0, 0, S.y, 0, 0, 0, S.z); 
    return mul(mul(R, S_matrix), mul(S_matrix, transpose(R)));
}

float3x3 QuaternionToRotationMatrix(float4 q) {
    float x = q.x, y = q.y, z = q.z, w = q.w;

    return float3x3(
        1.0 - 2.0 * (y * y + z * z),  2.0 * (x * y - w * z),  2.0 * (x * z + w * y),
        2.0 * (x * y + w * z),  1.0 - 2.0 * (x * x + z * z),  2.0 * (y * z - w * x),
        2.0 * (x * z - w * y),  2.0 * (y * z + w * x),  1.0 - 2.0 * (x * x + y * y)
    );
}

float2x2 ComputeScreenCovariance(float3x3 Sigma3D, float3x2 J) {
    // Sigma2D = J * Sigma3D * J^T
    return mul(J, mul(Sigma3D, transpose(J)));
}

float3 ComputeSHBasis(float3 d) {
    float Y[9];

    // SH basis functions
    Y[0] = 0.282095;                      // Y_{0,0}
    Y[1] = 0.488603 * d.y;                // Y_{1,-1}
    Y[2] = 0.488603 * d.z;                // Y_{1,0}
    Y[3] = 0.488603 * d.x;                // Y_{1,1}
    Y[4] = 1.092548 * d.x * d.y;          // Y_{2,-2}
    Y[5] = 1.092548 * d.y * d.z;          // Y_{2,-1}
    Y[6] = 0.315392 * (3.0 * d.z * d.z - 1.0); // Y_{2,0}
    Y[7] = 1.092548 * d.x * d.z;          // Y_{2,1}
    Y[8] = 0.546274 * (d.x * d.x - d.y * d.y); // Y_{2,2}

    return float3(Y[0], Y[1], Y[2]); // Return first 3 for debugging
}


float3 ComputeSplatColor(float3 viewDir, float shR[9], float shG[9], float shB[9]) {
    float Y[9];

    // Compute SH basis functions
    Y[0] = 0.282095;
    Y[1] = 0.488603 * viewDir.y;
    Y[2] = 0.488603 * viewDir.z;
    Y[3] = 0.488603 * viewDir.x;
    Y[4] = 1.092548 * viewDir.x * viewDir.y;
    Y[5] = 1.092548 * viewDir.y * viewDir.z;
    Y[6] = 0.315392 * (3.0 * viewDir.z * viewDir.z - 1.0);
    Y[7] = 1.092548 * viewDir.x * viewDir.z;
    Y[8] = 0.546274 * (viewDir.x * viewDir.x - viewDir.y * viewDir.y);

    // Compute RGB
    float R = 0, G = 0, B = 0;
    for (int i = 0; i < 9; i++) {
        R += shR[i] * Y[i];
        G += shG[i] * Y[i];
        B += shB[i] * Y[i];
    }

    return float3(R, G, B);  // Return computed RGB color
}

float ComputeGaussianInfluence(float2 pixelUV, float2 splatCenter, float2x2 Sigma2D_inv, float A) {
    float2 x = pixelUV - splatCenter;  // Offset from splat center
    float exponent = -0.5 * dot(x, mul(Sigma2D_inv, x));  // No need for transpose()
    return A * exp(exponent);  // Final Gaussian influence
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
     //splaty zostaly splaszczone - wszystkie dane sa obok siebie, potrzebna jest orientacja za pomoca liczby floatow w splacie 
    int splatID;
    int numberOfSplats = (int)sizes[0];
    int imageWidth = (int)sizes[1];
    int imageHeight = (int)sizes[2];
    int2 pixelCoords = id.xy;
    float3 finalSplatColor;

    float3 position;  // Pozycja w przestrzeni
    float3 scale;     // Skala
    float4 rotation;  // Rotacja
    float shR[9];     // Współczynniki SH (sfera, kanał czerwony)
    float shG[9];     // Współczynniki SH (sfera, kanał zielony)
    float shB[9];     // Współczynniki SH (sfera, kanał niebieski)
    float opacity;


    if (pixelCoords.x <= imageWidth || pixelCoords.y <= imageHeight){
    splatStruct splat;
    int j=0;
    for(j;j<numberOfSplats;j++){
        splatID=j*38;
        
        splat.position = float3( splatBuffer[splatID], splatBuffer[splatID + 1], splatBuffer[splatID + 2]);
        splat.scale =  float3( splatBuffer[splatID + 3], splatBuffer[splatID + 4], splatBuffer[splatID + 5]);
        float x = splatBuffer[splatID + 3];
        float y = splatBuffer[splatID + 4];
        float z = splatBuffer[splatID + 5];
        scale=float3(x,y,z);
        splat.rotation =float4(splatBuffer[splatID + 6], splatBuffer[splatID + 7], splatBuffer[splatID + 8], splatBuffer[splatID + 9]);

        // Współczynniki SH są zapisane blokami po 9 wartości
        for (int i = 0; i < 9; i++)
        {
            splat.shR[i] = splatBuffer[splatID + 10 + i];
            splat.shG[i] = splatBuffer[splatID + 19 + i];
            splat.shB[i] = splatBuffer[splatID + 28 + i];
        }

        splat.opacity = splatBuffer[splatID+37];

        float3 cameraPos = float3(cameraBuffer[0], cameraBuffer[1], cameraBuffer[2]);

        float3x3 rotation3x3 = QuaternionToRotationMatrix(splat.rotation);

        float3x3 covarianceMatrix3D = ComputeCovariance(rotation3x3,splat.scale);               //przeksztalcenie R i S w matryce covariancji

        // Pozycja splata w przestrzeni świata
        float4 worldPos = float4(splat.position, 1.0);

        // Transformacja na ekran
        float4 clipSpacePos = mul(ViewProjectionMatrix, worldPos);

        // Rzutowanie do przestrzeni obrazu 2D (Normal Device Coordinates)
        float2 screenPos = clipSpacePos.xy / clipSpacePos.w;

        float3 screenX = mul(ViewProjectionMatrix, float4(1, 0, 0, 0)).xyz;
        float3 screenY = mul(ViewProjectionMatrix, float4(0, 1, 0, 0)).xyz;
        float3 screenZ = mul(ViewProjectionMatrix, float4(0, 0, 1, 0)).xyz;

        // Tworzymy macierz Jacobiego (J) jako macierz 3x2
        float3x2 J = float3x2(screenX.xy, screenY.xy, screenZ.xy);

        //parametry uzywane do  obliczenia wplywu splata
        float2x2 covarianceMatrix2D=ComputeScreenCovariance(covarianceMatrix3D, J);;           //uzyskanie matrycy 2D, ktora bedzie uzyta w wyznaczaniu wplywu splata
        
        
        float3 viewDir = normalize(splat.position - cameraPos);

        float gaussianInfluence = ComputeGaussianInfluence(id.xy,splat.position,covarianceMatrix2D,splat.opacity);
        float3 renderedCol = ComputeSplatColor(viewDir,splat.shR,splat.shG,splat.shB)*gaussianInfluence;
        
        finalSplatColor.xyz=renderedCol+finalSplatColor;//finalSplatColor+renderedCol;
       
        }
    }
    
    
    
    Result[id.xy]= float4(finalSplatColor,1);

}
